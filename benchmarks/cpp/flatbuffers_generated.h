// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATBUFFERS_BENCH_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_FLATBUFFERS_BENCH_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace bench_flatbuffers {

struct Position;

struct Entity;
struct EntityBuilder;

enum EntityType : int8_t {
  EntityType_Player = 0,
  EntityType_Enemy = 1,
  EntityType_Neutral = 2,
  EntityType_MIN = EntityType_Player,
  EntityType_MAX = EntityType_Neutral
};

inline const EntityType (&EnumValuesEntityType())[3] {
  static const EntityType values[] = {
    EntityType_Player,
    EntityType_Enemy,
    EntityType_Neutral
  };
  return values;
}

inline const char * const *EnumNamesEntityType() {
  static const char * const names[4] = {
    "Player",
    "Enemy",
    "Neutral",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntityType(EntityType e) {
  if (::flatbuffers::IsOutRange(e, EntityType_Player, EntityType_Neutral)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntityType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Position FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Position()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Position(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Position, 12);

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_POSITION = 6,
    VT_NAME = 8,
    VT_RELATED = 10
  };
  bench_flatbuffers::EntityType type() const {
    return static_cast<bench_flatbuffers::EntityType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const bench_flatbuffers::Position *position() const {
    return GetStruct<const bench_flatbuffers::Position *>(VT_POSITION);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<bench_flatbuffers::Entity>> *related() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<bench_flatbuffers::Entity>> *>(VT_RELATED);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<bench_flatbuffers::Position>(verifier, VT_POSITION, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_RELATED) &&
           verifier.VerifyVector(related()) &&
           verifier.VerifyVectorOfTables(related()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(bench_flatbuffers::EntityType type) {
    fbb_.AddElement<int8_t>(Entity::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_position(const bench_flatbuffers::Position *position) {
    fbb_.AddStruct(Entity::VT_POSITION, position);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_related(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<bench_flatbuffers::Entity>>> related) {
    fbb_.AddOffset(Entity::VT_RELATED, related);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bench_flatbuffers::EntityType type = bench_flatbuffers::EntityType_Player,
    const bench_flatbuffers::Position *position = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<bench_flatbuffers::Entity>>> related = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_related(related);
  builder_.add_name(name);
  builder_.add_position(position);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bench_flatbuffers::EntityType type = bench_flatbuffers::EntityType_Player,
    const bench_flatbuffers::Position *position = nullptr,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<bench_flatbuffers::Entity>> *related = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto related__ = related ? _fbb.CreateVector<::flatbuffers::Offset<bench_flatbuffers::Entity>>(*related) : 0;
  return bench_flatbuffers::CreateEntity(
      _fbb,
      type,
      position,
      name__,
      related__);
}

inline const bench_flatbuffers::Entity *GetEntity(const void *buf) {
  return ::flatbuffers::GetRoot<bench_flatbuffers::Entity>(buf);
}

inline const bench_flatbuffers::Entity *GetSizePrefixedEntity(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<bench_flatbuffers::Entity>(buf);
}

inline bool VerifyEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bench_flatbuffers::Entity>(nullptr);
}

inline bool VerifySizePrefixedEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bench_flatbuffers::Entity>(nullptr);
}

inline void FinishEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<bench_flatbuffers::Entity> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<bench_flatbuffers::Entity> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace bench_flatbuffers

#endif  // FLATBUFFERS_GENERATED_FLATBUFFERS_BENCH_FLATBUFFERS_H_
