// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod bench_flatbuffers {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_ENTITY_TYPE: i8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_ENTITY_TYPE: i8 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ENTITY_TYPE: [EntityType; 3] =
        [EntityType::Player, EntityType::Enemy, EntityType::Neutral];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct EntityType(pub i8);
    #[allow(non_upper_case_globals)]
    impl EntityType {
        pub const Player: Self = Self(0);
        pub const Enemy: Self = Self(1);
        pub const Neutral: Self = Self(2);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 2;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Player, Self::Enemy, Self::Neutral];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Player => Some("Player"),
                Self::Enemy => Some("Enemy"),
                Self::Neutral => Some("Neutral"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for EntityType {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for EntityType {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for EntityType {
        type Output = EntityType;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for EntityType {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for EntityType {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for EntityType {}
    // struct Position, aligned to 4
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct Position(pub [u8; 12]);
    impl Default for Position {
        fn default() -> Self {
            Self([0; 12])
        }
    }
    impl core::fmt::Debug for Position {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("Position")
                .field("x", &self.x())
                .field("y", &self.y())
                .field("z", &self.z())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Position {}
    impl<'a> flatbuffers::Follow<'a> for Position {
        type Inner = &'a Position;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Position>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Position {
        type Inner = &'a Position;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Position>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Position {
        type Output = Position;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src =
                ::core::slice::from_raw_parts(self as *const Position as *const u8, Self::size());
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for Position {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> Position {
        #[allow(clippy::too_many_arguments)]
        pub fn new(x: f32, y: f32, z: f32) -> Self {
            let mut s = Self([0; 12]);
            s.set_x(x);
            s.set_y(y);
            s.set_z(z);
            s
        }

        pub const fn get_fully_qualified_name() -> &'static str {
            "bench_flatbuffers.Position"
        }

        pub fn x(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_x(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn y(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[4..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_y(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[4..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn z(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_z(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn unpack(&self) -> PositionT {
            PositionT {
                x: self.x(),
                y: self.y(),
                z: self.z(),
            }
        }
    }

    #[derive(Debug, Clone, PartialEq, Default)]
    pub struct PositionT {
        pub x: f32,
        pub y: f32,
        pub z: f32,
    }
    impl PositionT {
        pub fn pack(&self) -> Position {
            Position::new(self.x, self.y, self.z)
        }
    }

    pub enum EntityOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Entity<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Entity<'a> {
        type Inner = Entity<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Entity<'a> {
        pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
        pub const VT_POSITION: flatbuffers::VOffsetT = 6;
        pub const VT_NAME: flatbuffers::VOffsetT = 8;
        pub const VT_RELATED: flatbuffers::VOffsetT = 10;

        pub const fn get_fully_qualified_name() -> &'static str {
            "bench_flatbuffers.Entity"
        }

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Entity { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args EntityArgs<'args>,
        ) -> flatbuffers::WIPOffset<Entity<'bldr>> {
            let mut builder = EntityBuilder::new(_fbb);
            if let Some(x) = args.related {
                builder.add_related(x);
            }
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            if let Some(x) = args.position {
                builder.add_position(x);
            }
            builder.add_type_(args.type_);
            builder.finish()
        }

        pub fn unpack(&self) -> EntityT {
            let type_ = self.type_();
            let position = self.position().map(|x| x.unpack());
            let name = self.name().map(|x| x.to_string());
            let related = self
                .related()
                .map(|x| x.iter().map(|t| t.unpack()).collect());
            EntityT {
                type_,
                position,
                name,
                related,
            }
        }

        #[inline]
        pub fn type_(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<EntityType>(Entity::VT_TYPE_, Some(EntityType::Player))
                    .unwrap()
            }
        }
        #[inline]
        pub fn position(&self) -> Option<&'a Position> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<Position>(Entity::VT_POSITION, None) }
        }
        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(Entity::VT_NAME, None)
            }
        }
        #[inline]
        pub fn related(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity>>,
                >>(Entity::VT_RELATED, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Entity<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<EntityType>("type_", Self::VT_TYPE_, false)?
                .visit_field::<Position>("position", Self::VT_POSITION, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entity>>,
                >>("related", Self::VT_RELATED, false)?
                .finish();
            Ok(())
        }
    }
    pub struct EntityArgs<'a> {
        pub type_: EntityType,
        pub position: Option<&'a Position>,
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
        pub related: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>,
            >,
        >,
    }
    impl<'a> Default for EntityArgs<'a> {
        #[inline]
        fn default() -> Self {
            EntityArgs {
                type_: EntityType::Player,
                position: None,
                name: None,
                related: None,
            }
        }
    }

    pub struct EntityBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> EntityBuilder<'a, 'b> {
        #[inline]
        pub fn add_type_(&mut self, type_: EntityType) {
            self.fbb_
                .push_slot::<EntityType>(Entity::VT_TYPE_, type_, EntityType::Player);
        }
        #[inline]
        pub fn add_position(&mut self, position: &Position) {
            self.fbb_
                .push_slot_always::<&Position>(Entity::VT_POSITION, position);
        }
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Entity::VT_NAME, name);
        }
        #[inline]
        pub fn add_related(
            &mut self,
            related: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Entity<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Entity::VT_RELATED, related);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntityBuilder<'a, 'b> {
            let start = _fbb.start_table();
            EntityBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Entity<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Entity<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Entity");
            ds.field("type_", &self.type_());
            ds.field("position", &self.position());
            ds.field("name", &self.name());
            ds.field("related", &self.related());
            ds.finish()
        }
    }
    #[non_exhaustive]
    #[derive(Debug, Clone, PartialEq)]
    pub struct EntityT {
        pub type_: EntityType,
        pub position: Option<PositionT>,
        pub name: Option<String>,
        pub related: Option<Vec<EntityT>>,
    }
    impl Default for EntityT {
        fn default() -> Self {
            Self {
                type_: EntityType::Player,
                position: None,
                name: None,
                related: None,
            }
        }
    }
    impl EntityT {
        pub fn pack<'b>(
            &self,
            _fbb: &mut flatbuffers::FlatBufferBuilder<'b>,
        ) -> flatbuffers::WIPOffset<Entity<'b>> {
            let type_ = self.type_;
            let position_tmp = self.position.as_ref().map(|x| x.pack());
            let position = position_tmp.as_ref();
            let name = self.name.as_ref().map(|x| _fbb.create_string(x));
            let related = self.related.as_ref().map(|x| {
                let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();
                _fbb.create_vector(&w)
            });
            Entity::create(
                _fbb,
                &EntityArgs {
                    type_,
                    position,
                    name,
                    related,
                },
            )
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Entity`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_entity_unchecked`.
    pub fn root_as_entity(buf: &[u8]) -> Result<Entity, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Entity>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Entity` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_entity_unchecked`.
    pub fn size_prefixed_root_as_entity(
        buf: &[u8],
    ) -> Result<Entity, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Entity>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Entity` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_entity_unchecked`.
    pub fn root_as_entity_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Entity<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Entity<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Entity` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_entity_unchecked`.
    pub fn size_prefixed_root_as_entity_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Entity<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Entity<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Entity and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Entity`.
    pub unsafe fn root_as_entity_unchecked(buf: &[u8]) -> Entity {
        flatbuffers::root_unchecked::<Entity>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Entity and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Entity`.
    pub unsafe fn size_prefixed_root_as_entity_unchecked(buf: &[u8]) -> Entity {
        flatbuffers::size_prefixed_root_unchecked::<Entity>(buf)
    }
    #[inline]
    pub fn finish_entity_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Entity<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_entity_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Entity<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod bench_flatbuffers
